plugins {
    id "com.github.johnrengelman.shadow"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
//        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "veil.mixins.json"
        mixinConfig "veil.forge.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

//    runtimeOnly fg.deobf("maven.modrinth:embeddium:0.3.4+mc1.20.1")
//    runtimeOnly fg.deobf("curse.maven:oculus-581495:4767500")

    // GLSL Transformer requires Antlr v4, but Forge ships v3
    implementation(shadowCommon("org.antlr:antlr4-runtime:${antlr_runtime_version}"))
    implementation(shadowCommon("io.github.douira:glsl-transformer:${glsl_transformer_version}"))
    implementation(include("io.github.douira:glsl-preprocessor:${glsl_preprocessor_version}"))
    implementation(include("gg.moonflower:molang-compiler:${molang_compiler_version}"))

    implementation(include("io.github.spair:imgui-java-binding:$imgui_version"))
    implementation(include("io.github.spair:imgui-java-lwjgl3:$imgui_version")) {
        exclude group: 'org.lwjgl'
        exclude group: 'org.lwjgl.lwjgl'
    }

    implementation(include("io.github.spair:imgui-java-natives-linux:$imgui_version"))
    implementation(include("io.github.spair:imgui-java-natives-macos-ft:$imgui_version"))
    implementation(include("io.github.spair:imgui-java-natives-windows:$imgui_version"))

    implementation(include("org.lwjgl:lwjgl-opencl:$lwjgl_version")) {
        transitive false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }

    // Resources fix
    copy {
        from "$projectDir/../common/src/main/resources/"
        into "build/resources/main"
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"

    relocate "io.github.douira.glsl_transformer", "${project.group}.lib.douira.glsl_transformer"
    relocate "org.antlr", "${project.group}.lib.antlr"
    relocate "org.stringtemplate", "${project.group}.lib.stringtemplate"
    relocate "org.apache.commons.collections4", "${project.group}.lib.apache.commons.collections4"
    relocate "org.abego.treelayout", "${project.group}.lib.abego.treelayout"
    relocate "com.ibm.icu", "${project.group}.lib.ibm.icu"
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

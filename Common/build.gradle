base {
    archivesName = "${mod_name}-common-${minecraft_version}"
}

architectury {
    common(rootProject.enabled_platforms.split(","))
}

loom {
    accessWidenerPath = file("src/main/resources/veil.accesswidener")
}

test {
    useJUnitPlatform()
}

dependencies {
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

    implementation "io.github.douira:glsl-transformer:${glsl_transformer_version}"
    implementation "io.github.douira:glsl-preprocessor:${glsl_preprocessor_version}"
    implementation("gg.moonflower:molang-compiler:${molang_compiler_version}")

    implementation "io.github.spair:imgui-java-binding:$imgui_version"
    implementation ("io.github.spair:imgui-java-lwjgl3:$imgui_version") {
        exclude group: 'org.lwjgl'
        exclude group: 'org.lwjgl.lwjgl'
    }

    implementation "org.lwjgl:lwjgl-opencl:$lwjgl_version"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'fabric-loom'
    id 'io.github.juuxel.loom-quiltflower'
}

archivesBaseName = "${mod_name}-fabric-${minecraft_version}"
if (System.getenv('BUILD_NUMBER') != null) {
    version += "." + System.getenv('BUILD_NUMBER')
}

loom {
    if (project(":Common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":Common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation 'org.jetbrains:annotations:24.0.1'
    implementation project(":Common")

    annotationProcessor("com.github.LlamaLad7:MixinExtras:0.1.1")
    implementation 'com.github.LlamaLad7:MixinExtras:0.1.1'

    modImplementation("net.fabricmc:fabric-language-kotlin:1.10.10+kotlin.1.9.10")
    include(implementation("gg.moonflower:molang-compiler:${molang_compiler_version}"))

    include(implementation("io.github.spair:imgui-java-binding:$imgui_version"))
    include(implementation("io.github.spair:imgui-java-lwjgl3:$imgui_version")) {
        exclude group: 'org.lwjgl'
        exclude group: 'org.lwjgl.lwjgl'
    }

    include(implementation("io.github.spair:imgui-java-natives-linux:$imgui_version"))
    include(implementation("io.github.spair:imgui-java-natives-macos:$imgui_version"))
    include(implementation("io.github.spair:imgui-java-natives-windows:$imgui_version"))

    include(implementation("org.lwjgl:lwjgl-opencl:$lwjgl_version"))
}

tasks.withType(JavaCompile).configureEach {
    source(project(":Common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":Common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
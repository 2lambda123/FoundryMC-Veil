plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'fabric-loom'
}

archivesBaseName = "${mod_name}-fabric-${minecraft_version}"
if (System.getenv('BUILD_NUMBER') != null) {
    version += "." + System.getenv('BUILD_NUMBER')
}

loom {
    if (project(":Common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":Common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}
repositories {
    maven { url = "https://mvn.devos.one/snapshots/" }
    maven { url = "https://jitpack.io/" } // for Porting Lib: Mixin Extras, Fabric ASM
    maven { url = "https://cursemaven.com" } // Forge Config API Port
    maven { url = "https://api.modrinth.com/maven" } // LazyDFU, Sodium, Sandwichable
    maven { url = "https://maven.terraformersmc.com/" } // Mod Menu, Trinkets
    maven { // Reach Entity Attributes
        url = "https://maven.jamieswhiteshirt.com/libs-release"
        content { includeGroup("com.jamieswhiteshirt") }
    }
    maven { url = "https://maven.ladysnake.org/releases" } // CCA, for Trinkets
}
dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation 'org.jetbrains:annotations:24.0.1'
    implementation project(":Common")

    annotationProcessor("com.github.LlamaLad7:MixinExtras:0.1.1")
    implementation 'com.github.LlamaLad7:MixinExtras:0.1.1'

    modImplementation("net.fabricmc:fabric-language-kotlin:1.10.10+kotlin.1.9.10")
    include(implementation("gg.moonflower:molang-compiler:${molang_compiler_version}"))
    include(implementation(group: 'io.github.spair', name: 'imgui-java-binding', version: '1.86.10'))
    include(implementation("io.github.spair:imgui-java-lwjgl3:1.86.10") {
        exclude group: 'org.lwjgl'
        exclude group: 'org.lwjgl.lwjgl'
    })
    include(implementation(group: 'io.github.spair', name: 'imgui-java-natives-linux', version: '1.86.10'))
    include(implementation(group: 'io.github.spair', name: 'imgui-java-natives-macos', version: '1.86.10'))
    include(implementation(group: 'io.github.spair', name: 'imgui-java-natives-windows', version: '1.86.10'))
    modImplementation(include("io.github.fabricators_of_create.Porting-Lib:Porting-Lib:2.1.1148+1.20-entity-refactor"))
    include modImplementation("com.jamieswhiteshirt:reach-entity-attributes:2.4.0")
}

tasks.withType(JavaCompile).configureEach {
    source(project(":Common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":Common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
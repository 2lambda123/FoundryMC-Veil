plugins {
    id "com.github.johnrengelman.shadow"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

//    modRuntimeOnly "maven.modrinth:modmenu:7.2.2"

    modCompileOnly "maven.modrinth:sodium:mc1.20.1-0.5.3"
    modCompileOnly "maven.modrinth:iris:1.6.11+1.20.1"
    modCompileOnly "maven.modrinth:replaymod:1.20.1-2.6.15"
//    modRuntimeOnly "maven.modrinth:sodium:mc1.20.1-0.5.3"
//    modRuntimeOnly "maven.modrinth:iris:1.6.11+1.20.1"
//    modRuntimeOnly "maven.modrinth:replaymod:1.20.1-2.6.15"

    implementation(include("org.antlr:antlr4-runtime:${antlr_runtime_version}"))
    implementation(include("io.github.douira:glsl-transformer:${glsl_transformer_version}"))
    implementation(include("io.github.douira:glsl-preprocessor:${glsl_preprocessor_version}"))
    implementation(include("gg.moonflower:molang-compiler:${molang_compiler_version}"))

    implementation(include("io.github.spair:imgui-java-binding:$imgui_version"))
    implementation(include("io.github.spair:imgui-java-lwjgl3:$imgui_version")) {
        exclude group: 'org.lwjgl'
        exclude group: 'org.lwjgl.lwjgl'
    }

    implementation(include("io.github.spair:imgui-java-natives-linux:$imgui_version"))
    implementation(include("io.github.spair:imgui-java-natives-macos-ft:$imgui_version"))
    implementation(include("io.github.spair:imgui-java-natives-windows:$imgui_version"))

    implementation(include("org.lwjgl:lwjgl-opencl:$lwjgl_version")) {
        transitive false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    // Resources fix
    copy {
        from "$projectDir/../common/src/main/resources/"
        into "build/resources/main"
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
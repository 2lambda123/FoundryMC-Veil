plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'fabric-loom' version '1.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}
base {
    archivesName = "${mod_name}-fabric-${minecraft_version}"
}
if (System.getenv('BUILD_NUMBER') != null) {
    version += "." + System.getenv('BUILD_NUMBER')
}

loom {
    if (project(":Common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":Common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

configurations {
    shade
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation 'org.jetbrains:annotations:24.0.1'
    implementation project(":Common")

    modRuntimeOnly "maven.modrinth:modmenu:9.0.0"
    modCompileOnly "maven.modrinth:sodium:mc1.20.3-0.5.4"
    modCompileOnly "maven.modrinth:iris:1.6.17+1.20.4"
//    modRuntimeOnly "maven.modrinth:sodium:mc1.20.3-0.5.4"
//    modRuntimeOnly "maven.modrinth:iris:1.6.17+1.20.4"

    implementation "gg.moonflower:molang-compiler:${molang_compiler_version}"
    shade "gg.moonflower:molang-compiler:$molang_compiler_version"

    implementation "io.github.spair:imgui-java-binding:$imgui_version"
    implementation("io.github.spair:imgui-java-lwjgl3:$imgui_version") {
        exclude group: 'org.lwjgl'
        exclude group: 'org.lwjgl.lwjgl'
    }

    implementation "io.github.spair:imgui-java-natives-linux:$imgui_version"
    implementation "io.github.spair:imgui-java-natives-macos-ft:$imgui_version"
    implementation "io.github.spair:imgui-java-natives-windows:$imgui_version"

    shade "io.github.spair:imgui-java-binding:$imgui_version"
    shade("io.github.spair:imgui-java-lwjgl3:$imgui_version") {
        exclude group: 'org.lwjgl'
        exclude group: 'org.lwjgl.lwjgl'
    }

    shade "io.github.spair:imgui-java-natives-linux:$imgui_version"
    shade "io.github.spair:imgui-java-natives-macos:$imgui_version"
    shade "io.github.spair:imgui-java-natives-windows:$imgui_version"

    implementation("org.lwjgl:lwjgl-opencl:$lwjgl_version") {
        transitive false
    }
    shade("org.lwjgl:lwjgl-opencl:$lwjgl_version") {
        transitive false
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":Common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":Common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":Common").sourceSets.main.allSource)
}

shadowJar {
    archiveClassifier = 'dev'
    configurations = [project.configurations.shade]
    relocate "org.objectweb.asm", "${project.group}.lib.asm"
    relocate "org.lwjgl.opencl", "${project.group}.lib.opencl"
//    relocate "gg.moonflower.molangcompiler", "${project.group}.lib.molangcompiler"
//    relocate "imgui", "${project.group}.lib.imgui"
//    relocate "io.imgui", "${project.group}.lib.imgui-natives"
    relocate "io.github.spair:imgui-java-binding:$imgui_version", "${project.group}.relocated.imgui-java-binding"
    relocate "io.github.spair:imgui-java-lwjgl3:$imgui_version", "${project.group}.relocated.imgui-java-lwjgl3"
    relocate "io.github.spair:imgui-java-natives-linux:$imgui_version", "${project.group}.relocated.imgui-java-natives-linux"
    relocate "io.github.spair:imgui-java-natives-windows:$imgui_version", "${project.group}.relocated.imgui-java-natives-windows"
    relocate "io.github.spair:imgui-java-natives-macos:$imgui_version", "${project.group}.relocated.imgui-java-natives-macos"
}

remapJar {
    dependsOn(shadowJar)
    inputFile = tasks.shadowJar.archiveFile
}

processResources {
    from project(":Common").sourceSets.main.resources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}